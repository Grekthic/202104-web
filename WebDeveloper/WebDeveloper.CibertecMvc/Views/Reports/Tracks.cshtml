@model WebDeveloper.CibertecMvc.Models.TrackReportsViewModel
@{
    ViewData["Title"] = "Canciones";
}

@using Highsoft.Web.Mvc.Charts
@using Highsoft.Web.Mvc.Charts.Rendering

<h1>Reportes de Canciones</h1>

<p>Fecha de ultima actualizacion: @Model.FechaUltimaActualizacion.ToShortDateString()</p>

<h2>Top 3 canciones vendidas</h2>

<table>
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Artista</th>
            <th>Album</th>
            <th>Cantidad</th>
        </tr>
    </thead>
    @foreach (var item in Model.ListaTopCancionesVendidas)
    {
        <tr>
            <td>@item.TrackName</td>
            <td>@item.ArtistName</td>
            <td>@item.AlbumTitle</td>
            <td>@item.Quantity</td>
        </tr>
    }

</table>

@{
    var chartOptions = new Highcharts
    {
        Title = new Title
        {
            Text = "Grafico de barras"
        },
        Subtitle = new Subtitle
        {
            Text = "Fuente: Chinook"
        },

        XAxis = new List<XAxis>
{
                new XAxis
                {
                    Categories = Model.ListaTopCancionesVendidas.Select(ltcv=>ltcv.TrackName).ToList()
                }
            },
        YAxis = new List<YAxis>
{
                new YAxis
                {
                    Min = 0,
                    Title = new YAxisTitle
                    {
                        Text = "Cantidad"
                    }
                }
            },
        PlotOptions = new PlotOptions
        {
            Column = new PlotOptionsColumn
            {
                PointPadding = 0.2,
                BorderWidth = 0,
                Animation = new Animation { Enabled = false }
            }
        },
        Series = new List<Series>
{
                new ColumnSeries
                {
                    Name = "Canciones Vendidas",
                    Data = Model.HighChartsSerieTopCancionesVendidas
                },
        }
    };

    chartOptions.ID = "chart";
    var renderer = new HighchartsRenderer(chartOptions);
}

@Html.Raw(renderer.RenderHtml())

<br />
<button id="btn-test">Generar Nuevo punto de grafica</button>
<div id="container" style="height: 400px; min-width: 310px"></div>

@section HeadStyles {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" />
}
@section Scripts {
    <script src="https://code.highcharts.com/stock/highstock.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script>
        // Cuando se termine de cargar toda la pagina correctamente
        window.addEventListener("load", function () {
            // Crear la conexion
            const connection = new signalR.HubConnectionBuilder().withUrl("https://localhost:5003/trackshub").build();
            // Iniciar la conexion
            connection.start().then(function () {
                console.info("La conexion se inicio")
            })
            // Configurar los callbacks de los eventos recibidos
            connection.on("NotificarNuevaCancion", function (id, name) {
                toastr.info(`Se ha creado la cancion ${name} con id ${id}`);
            })

            let graphSeries;
            connection.on("PintarNuevaCantidadCanciones", function (count, date) {
                // Agregar un nuevo punto a la grafica
                console.info("data", { count, date })
                const newDate = new Date(date);
                graphSeries.addPoint([newDate.getTime(), count], true, true);
            })

            // Inicializar la grafica
            const btnTest = this.document.getElementById("btn-test");
            btnTest.addEventListener("click", function () {
                var x = (new Date()).getTime(), // current time
                    y = Math.round(Math.random() * 100);
                graphSeries.addPoint([x, y], true, true);
            })
            Highcharts.stockChart('container', {
                chart: {
                    events: {
                        load: function () {

                            // set up the updating of the chart each second
                            graphSeries = this.series[0];
                            //setInterval(function () {
                            //    var x = (new Date()).getTime(), // current time
                            //        y = Math.round(Math.random() * 100);
                            //    graphSeries.addPoint([x, y], true, true);
                            //}, 1000);
                        }
                    }
                },

                time: {
                    useUTC: false
                },

                rangeSelector: {
                    buttons: [{
                        count: 1,
                        type: 'minute',
                        text: '1M'
                    }, {
                        count: 5,
                        type: 'minute',
                        text: '5M'
                    }, {
                        type: 'all',
                        text: 'All'
                    }],
                    inputEnabled: false,
                    selected: 0
                },

                title: {
                    text: 'Live random data'
                },

                exporting: {
                    enabled: false
                },

                series: [{
                    name: 'Random data',
                    data: (function () {
                        // generate an array of random data
                        var data = [],
                            time = (new Date()).getTime(),
                            i;

                        for (i = -999; i <= 0; i += 1) {
                            data.push([
                                time + i * 1000,
                                Math.round(Math.random() * 100)
                            ]);
                        }
                        return data;
                    }())
                }]
            });
        })
    </script>
}


